#Your version: 0.6.0 Latest version: 0.6.0
# Generated by Neurodocker version 0.6.0
# Timestamp: 2020-03-03 17:43:28 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:

# /app/main.sh -f test.nii.gz -j test.json -a mprage.nii.gz -o /out
#     https://github.com/kaczmarj/neurodocker

# docker build -f Dockerfile -t neurobox:latest . && docker run --name neurobox_test --rm neurobox:latest

#docker run -v /mnt/NAS/EMOATT/Dataset/sub-002/ses-day2/anat:/anat:ro -v /mnt/NAS/EMOATT/Dataset/sub-002/ses-day2/func/:/func:ro -v /mnt/NAS/workdir/docker_tests/out:/out -v /mnt/NAS/workdir/docker_tests/misc/:/dev/shm --name neurobox_test_run --pull missing neurobox:latest

FROM neurodebian:bionic-non-free

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker


RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           afni \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ants \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*


USER root

ENV FSLDIR="/opt/fsl-6.0.6.4" \
    PATH="/opt/fsl-6.0.6.4/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.6.4/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.6.4/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas-base \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           python3-pip \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.6.4 -V 6.0.6.4


RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           convert3d \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           libtiff5 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           awscli \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN ln -s /usr/lib/x86_64-linux-gnu/libtiff.so.5 /usr/lib/x86_64-linux-gnu/libtiff.so.3

    ADD ROBEXv12.linux64.tar.gz /

    ENV ANTSPATH="/usr/lib/ants"
    ENV PATH="/usr/lib/ants:.:${PATH}"
    ENV AWS_ACCESS_KEY_ID="AKIATU523SCUQEFJWBGW"
    ENV AWS_SECRET_ACCESS_KEY="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"

    #COPY batchjob_for_Docker.sh /batchjob.sh
    #COPY pd_dockerParralelized.sh /Track_1_Preproc_awsN.sh

RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "neurodebian:bionic-non-free" \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "afni" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "ants" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "fsl-complete" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "convert3d" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "libtiff5" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "awscli" \
    \n      ] \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json

RUN apt-get update -qq && apt-get install -y tcsh xfonts-base python-qt4       \
                        python-matplotlib                 \
                        gsl-bin netpbm gnome-tweak-tool   \
                        libjpeg62 xvfb xterm vim curl     \
                        gedit evince eog                  \
                        libglu1-mesa-dev libglw1-mesa     \
                        libxm4 build-essential            \
                        libcurl4-openssl-dev libxml2-dev  \
                        libssl-dev libgfortran3           \
                        gnome-terminal nautilus           \
                        gnome-icon-theme-symbolic         \
                        firefox xfonts-100dpi \
                        && apt-get clean \
                        && rm -rf /var/lib/apt/lists/*

#RUN mkdir /temp && chmod 777 /temp
RUN curl -O --insecure https://afni.nimh.nih.gov/pub/dist/bin/misc/@update.afni.binaries
RUN ln -s /usr/lib/x86_64-linux-gnu/libgsl.so.23 /usr/lib/x86_64-linux-gnu/libgsl.so.19
RUN tcsh @update.afni.binaries -package linux_ubuntu_16_64 -do_extras -bindir /usr/local/AFNIbin
ENTRYPOINT ["/neurodocker/startup.sh"]

VOLUME /func
VOLUME /anat
VOLUME /params
VOLUME /out
VOLUME /dev/shm

RUN mkdir /app
WORKDIR /app
COPY pd_dockerParallelized.sh /app/main.sh
