#!/bin/bash

#  Print commands and their arguments as they are executed.
set -x

#  Sets MNI project to true by default
mni_project=true

orig_space=false

#    Getopts is used by shell procedures to parse positional parameters.
#    Check for the optional flags that were provided in the pd_dockerParallelized.sh script
while getopts f:a:j:c:b:s:l:r:p:o:n: flag
do
        case "${flag}" in
                f) # -f flag was used to provide the functional MRI image file 
			func_file=${OPTARG}
			func_filepath=/func/${func_file}
			;;
                a) # -a flag was used to provide the anatomical MRI image file
			anat_file=${OPTARG}
			anat_filepath=/anat/${anat_file}
			;;
                j) # -j flag was used to provide the json sidecar file
			json_file=${OPTARG}
			json_filepath=/func/${json_file}
			;;
                c) # -c flag was used to provide the bias channel fieldmap file
			biasch_file=${OPTARG}
			biasch_filepath=/func/${biasch_file}
			;;
                b) # -b flag was used to provide the body coil fieldmap file
			biasbc_file=${OPTARG}
			biasbc_filepath=/func/${biasbc_file}
			;;
                s) # -s flag was used to provide the single band reference image file
			sbref_file=${OPTARG}
			sbref_filepath=/func/${sbref_file}
			;;
                l) # -l flag was used to provide the left-right spin echo fieldmap file
			spinlr_file=${OPTARG}
			spinlr_filepath=/func/${spinlr_file}
			;;
                r) # -r flag was used to provide the right-left spin echo fieldmap file
			spinrl_file=${OPTARG}
			spinrl_filepath=/func/${spinrl_file}
			;;
                p) # -p flag was used to provide the aquisition parameters text file
			params_file=${OPTARG}
			params_filepath=/params/${params_file}
			;;
                o) # -o flag was used to provide the output directory for the processed images
			out_filepath=${OPTARG}
			;;
                n) # -n flag was used to indicate not putting subject into MNI space
			mni_project=${OPTARG}
			;;
        esac
done


# Print file names to the console how they were parsed into script
echo "func_file : ${func_file}"
echo "anat_file : ${anat_file}"
echo "json_file : ${json_file}"
echo "biasch_file : ${biasch_file}"
echo "biasbc_file : ${biasbc_file}"
echo "sbref_file : ${sbref_file}"
echo "spinlr_file : ${spinlr_file}"
echo "spinrl_file : ${spinrl_file}"
echo "params_file : ${params_file}"
echo "out_filepath : ${out_filepath}"
echo "mni_project :  ${mni_project}"


# Extract subject ID from out filepath.
# This assumes subject ID is either at the end of the output filepath...
# ...or that it is one directory above the ses-01 directory (assuming there can be multiple sessions)
run_dir=`basename $out_filepath`
if [[ $out_filepath == *"ses"* ]]
then
	# If the specified output directory contains "ses", then the subject ID is one directory above the "ses" directory
	path_ending_in_ID=`dirname $out_filepath`
else
	# If the specified output directory does not contain "ses", then the subject ID is at the very end of the specified output directory
	path_ending_in_ID=$out_filepath
fi

# The basename utility deletes any prefix ending with the last slash ‘/’ character present in string
# Extract the subject ID from the path ending in id and capture it in a variable to use later
subjectID=`basename $path_ending_in_ID`
echo "subjectID is ${subjectID}"


# Location of the temporary filesystem in the singularity container
tmpfs=/dev/shm

# Location on cluster mounted into sif container for final processed image
outputMount=/out

# Capture the start time of the script to measure benchmark time
start=`date +%s`

#Sets FSL Paths
FSLDIR=/usr/share/fsl/5.0

#Sets path for ROBEX (For Skullstripping)
export PATH=$PATH:/usr/lib/ROBEX:/usr/lib/ants

#Sets path for ANTs tools (for normalization workflow)
export ANTSPATH=/usr/lib/ants

#Sets additional paths for AFNI and FSL
export AFNIbinPATH=/usr/local/AFNIbin
PATH=${AFNIbinPATH}:${PATH}
PATH=${FSLDIR}/bin:${PATH}
export FSLDIR PATH
. ${FSLDIR}/etc/fslconf/fsl.sh

#Marks the template to be used
template=/usr/share/fsl/data/standard/MNI152_T1_2mm_brain.nii.gz
templatemask=/usr/share/fsl/data/standard/MNI152_T1_2mm_brain_mask.nii.gz

#Deletes files on conatiner for this subject in case they exist already in cache
rm -rf ${tmpfs}/derivatives/$subjectID


#Create directory for subject intermediate derivative files
mkdir -p  ${tmpfs}/derivatives/$subjectID



# Sets locations of intermediate file directories
mocodir=${tmpfs}/derivatives/${subjectID}/motion
coregdir=${tmpfs}/derivatives/${subjectID}/coregistration
normdir=${tmpfs}/derivatives/${subjectID}/normalization
procdir=${tmpfs}/derivatives/${subjectID}/processed
anatdir=${tmpfs}/derivatives/${subjectID}/anat
funcdir=${tmpfs}/derivatives/${subjectID}/func
fmapdir=${tmpfs}/derivatives/$subjectID/fieldmap
biasdir=${tmpfs}/derivatives/$subjectID/bias_field
sbrefdir=${tmpfs}/derivatives/$subjectID/SBRef

# Non-destructively creates intermediate file directories (probably can just create them due to line 121)
mkdir -p ${coregdir}
mkdir -p ${mocodir}
mkdir -p ${normdir}
mkdir -p ${procdir}
mkdir -p ${anatdir}
mkdir -p ${funcdir}
mkdir -p ${fmapdir}
mkdir -p ${biasdir}
mkdir -p ${sbrefdir}

# (Bias Correction for voxel intensity distortions) Calls the AFNI linux utilities to prepare de-baised fMRI and SBREF subject data
function afni_set() {
	# Performs voxel-by-voxel division on the body coil and bias channel fieldmaps to obtain receive coil sensitivity fieldmap
	3dcalc -a ${biasch_filepath} -b ${biasbc_filepath} -prefix ${tmpfs}/derivatives/$subjectID/bias_field/${subjectID}_bias_field.nii.gz -expr 'b/a'

	# Deobliques previously created sensitivity fieldmap, puts it in cartesian coordinate system
	3dWarp -deoblique -prefix ${tmpfs}/derivatives/$subjectID/bias_field/${subjectID}_bias_field_deobl.nii.gz ${tmpfs}/derivatives/$subjectID/bias_field/${subjectID}_bias_field.nii.gz

	# Computes the brain mask from the singleband reference (SBREF) image
	3dAutomask -dilate 2 -prefix ${tmpfs}/derivatives/$subjectID/SBRef/${subjectID}_3T_rfMRI_REST1_LR_SBRef_Mask.nii.gz ${sbref_filepath}

	# Warps the deobliqued sensitivity fieldmaps into the subject's anatomical coordinate space
	3dWarp -oblique_parent ${func_filepath} -gridset ${func_filepath} -prefix ${tmpfs}/derivatives/$subjectID/bias_field/${subjectID}_biasfield_card2EPIoblN.nii.gz ${tmpfs}/derivatives/$subjectID/bias_field/${subjectID}_bias_field_deobl.nii.gz
   
	# Bias Correction on subject fMRI: Performs voxel-wise multiplication between the functional MRI image, SBREF mask, and subject warped sensitivity fieldmap.
	3dcalc -float -a ${func_filepath} -b ${tmpfs}/derivatives/$subjectID/SBRef/${subjectID}_3T_rfMRI_REST1_LR_SBRef_Mask.nii.gz -c ${tmpfs}/derivatives/$subjectID/bias_field/${subjectID}_biasfield_card2EPIoblN.nii.gz  -prefix ${funcdir}/${subjectID}_3T_rfMRI_REST1_RL_DEBIAS.nii.gz -expr 'a*b*c'

	# Bias Correction on subject SBREF Mask: Perform voxel-wise multiplication between SBREF image, SBREF mask, and subject warped sensitivity fieldmap.
	3dcalc  -float  -a ${sbref_filepath} -b ${tmpfs}/derivatives/$subjectID/SBRef/${subjectID}_3T_rfMRI_REST1_LR_SBRef_Mask.nii.gz -c ${tmpfs}/derivatives/$subjectID/bias_field/${subjectID}_biasfield_card2EPIoblN.nii.gz  -prefix ${funcdir}/${subjectID}_3T_rfMRI_REST1_RL_DEBIAS_SBRef.nii.gz -expr 'a*b*c'
}

# (TOPUP Correction for Geometric Distortions)
function topup_set {
	# acqparams is a 4xN matrix : first three cols are xyz phase encoding directions, last col is readout time, stored in a text file provided by user
	# N is number of volumes in ${fmapdir}/${subjectID}_3T_Phase_Map.nii.gz	 (created as output from FSL merge function below)
	# See here for more information: https://web.mit.edu/fsl_v5.0.10/fsl/doc/wiki/topup(2f)TopupUsersGuide.html#A--datain
	acqparams=$params_filepath

	# Concatenates left-right and right-left spin echo fieldmaps into one fieldmap
        fslmerge -t ${fmapdir}/${subjectID}_3T_Phase_Map.nii.gz ${spinlr_filepath} ${spinrl_filepath}


	# Estimates the geometric susceptibility fieldmap using the LR/RL fieldmap and acquisition parameters matrix
        topup --imain=${fmapdir}/${subjec